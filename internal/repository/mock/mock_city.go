// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/repository (interfaces: CityRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_city.go ResuMatch/internal/repository CityRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
	isgomock struct{}
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// GetCityByID mocks base method.
func (m *MockCityRepository) GetCityByID(arg0 context.Context, arg1 int) (*entity.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityByID indicates an expected call of GetCityByID.
func (mr *MockCityRepositoryMockRecorder) GetCityByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityByID", reflect.TypeOf((*MockCityRepository)(nil).GetCityByID), arg0, arg1)
}

// GetCityByName mocks base method.
func (m *MockCityRepository) GetCityByName(arg0 context.Context, arg1 string) (*entity.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCityByName", arg0, arg1)
	ret0, _ := ret[0].(*entity.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCityByName indicates an expected call of GetCityByName.
func (mr *MockCityRepositoryMockRecorder) GetCityByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCityByName", reflect.TypeOf((*MockCityRepository)(nil).GetCityByName), arg0, arg1)
}
