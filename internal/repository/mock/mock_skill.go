// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/repository (interfaces: SkillRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_skill.go ResuMatch/internal/repository SkillRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSkillRepository is a mock of SkillRepository interface.
type MockSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSkillRepositoryMockRecorder
	isgomock struct{}
}

// MockSkillRepositoryMockRecorder is the mock recorder for MockSkillRepository.
type MockSkillRepositoryMockRecorder struct {
	mock *MockSkillRepository
}

// NewMockSkillRepository creates a new mock instance.
func NewMockSkillRepository(ctrl *gomock.Controller) *MockSkillRepository {
	mock := &MockSkillRepository{ctrl: ctrl}
	mock.recorder = &MockSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSkillRepository) EXPECT() *MockSkillRepositoryMockRecorder {
	return m.recorder
}

// GetByIDs mocks base method.
func (m *MockSkillRepository) GetByIDs(ctx context.Context, ids []int) ([]entity.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDs", ctx, ids)
	ret0, _ := ret[0].([]entity.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDs indicates an expected call of GetByIDs.
func (mr *MockSkillRepositoryMockRecorder) GetByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDs", reflect.TypeOf((*MockSkillRepository)(nil).GetByIDs), ctx, ids)
}
