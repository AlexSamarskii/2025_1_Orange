// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/repository (interfaces: ApplicantRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_applicant.go ResuMatch/internal/repository ApplicantRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockApplicantRepository is a mock of ApplicantRepository interface.
type MockApplicantRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicantRepositoryMockRecorder
	isgomock struct{}
}

// MockApplicantRepositoryMockRecorder is the mock recorder for MockApplicantRepository.
type MockApplicantRepositoryMockRecorder struct {
	mock *MockApplicantRepository
}

// NewMockApplicantRepository creates a new mock instance.
func NewMockApplicantRepository(ctrl *gomock.Controller) *MockApplicantRepository {
	mock := &MockApplicantRepository{ctrl: ctrl}
	mock.recorder = &MockApplicantRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicantRepository) EXPECT() *MockApplicantRepositoryMockRecorder {
	return m.recorder
}

// CreateApplicant mocks base method.
func (m *MockApplicantRepository) CreateApplicant(ctx context.Context, email, firstName, lastName string, passwordHash, passwordSalt []byte) (*entity.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicant", ctx, email, firstName, lastName, passwordHash, passwordSalt)
	ret0, _ := ret[0].(*entity.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicant indicates an expected call of CreateApplicant.
func (mr *MockApplicantRepositoryMockRecorder) CreateApplicant(ctx, email, firstName, lastName, passwordHash, passwordSalt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicant", reflect.TypeOf((*MockApplicantRepository)(nil).CreateApplicant), ctx, email, firstName, lastName, passwordHash, passwordSalt)
}

// GetApplicantByEmail mocks base method.
func (m *MockApplicantRepository) GetApplicantByEmail(ctx context.Context, email string) (*entity.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicantByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicantByEmail indicates an expected call of GetApplicantByEmail.
func (mr *MockApplicantRepositoryMockRecorder) GetApplicantByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicantByEmail", reflect.TypeOf((*MockApplicantRepository)(nil).GetApplicantByEmail), ctx, email)
}

// GetApplicantByID mocks base method.
func (m *MockApplicantRepository) GetApplicantByID(ctx context.Context, id int) (*entity.Applicant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicantByID", ctx, id)
	ret0, _ := ret[0].(*entity.Applicant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicantByID indicates an expected call of GetApplicantByID.
func (mr *MockApplicantRepositoryMockRecorder) GetApplicantByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicantByID", reflect.TypeOf((*MockApplicantRepository)(nil).GetApplicantByID), ctx, id)
}

// UpdateApplicant mocks base method.
func (m *MockApplicantRepository) UpdateApplicant(ctx context.Context, userID int, fields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplicant", ctx, userID, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplicant indicates an expected call of UpdateApplicant.
func (mr *MockApplicantRepositoryMockRecorder) UpdateApplicant(ctx, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicant", reflect.TypeOf((*MockApplicantRepository)(nil).UpdateApplicant), ctx, userID, fields)
}
