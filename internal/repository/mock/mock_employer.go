// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/repository (interfaces: EmployerRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_employer.go ResuMatch/internal/repository EmployerRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEmployerRepository is a mock of EmployerRepository interface.
type MockEmployerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployerRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployerRepositoryMockRecorder is the mock recorder for MockEmployerRepository.
type MockEmployerRepositoryMockRecorder struct {
	mock *MockEmployerRepository
}

// NewMockEmployerRepository creates a new mock instance.
func NewMockEmployerRepository(ctrl *gomock.Controller) *MockEmployerRepository {
	mock := &MockEmployerRepository{ctrl: ctrl}
	mock.recorder = &MockEmployerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployerRepository) EXPECT() *MockEmployerRepositoryMockRecorder {
	return m.recorder
}

// CreateEmployer mocks base method.
func (m *MockEmployerRepository) CreateEmployer(ctx context.Context, email, companyName, legalAddress string, passwordHash, passwordSalt []byte) (*entity.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployer", ctx, email, companyName, legalAddress, passwordHash, passwordSalt)
	ret0, _ := ret[0].(*entity.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEmployer indicates an expected call of CreateEmployer.
func (mr *MockEmployerRepositoryMockRecorder) CreateEmployer(ctx, email, companyName, legalAddress, passwordHash, passwordSalt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployer", reflect.TypeOf((*MockEmployerRepository)(nil).CreateEmployer), ctx, email, companyName, legalAddress, passwordHash, passwordSalt)
}

// GetEmployerByEmail mocks base method.
func (m *MockEmployerRepository) GetEmployerByEmail(ctx context.Context, email string) (*entity.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerByEmail indicates an expected call of GetEmployerByEmail.
func (mr *MockEmployerRepositoryMockRecorder) GetEmployerByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerByEmail", reflect.TypeOf((*MockEmployerRepository)(nil).GetEmployerByEmail), ctx, email)
}

// GetEmployerByID mocks base method.
func (m *MockEmployerRepository) GetEmployerByID(ctx context.Context, id int) (*entity.Employer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployerByID", ctx, id)
	ret0, _ := ret[0].(*entity.Employer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployerByID indicates an expected call of GetEmployerByID.
func (mr *MockEmployerRepositoryMockRecorder) GetEmployerByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployerByID", reflect.TypeOf((*MockEmployerRepository)(nil).GetEmployerByID), ctx, id)
}

// UpdateEmployer mocks base method.
func (m *MockEmployerRepository) UpdateEmployer(ctx context.Context, userID int, fields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployer", ctx, userID, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployer indicates an expected call of UpdateEmployer.
func (mr *MockEmployerRepositoryMockRecorder) UpdateEmployer(ctx, userID, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployer", reflect.TypeOf((*MockEmployerRepository)(nil).UpdateEmployer), ctx, userID, fields)
}
