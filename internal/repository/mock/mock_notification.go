// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/repository (interfaces: NotificationRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_notification.go ResuMatch/internal/repository NotificationRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
	isgomock struct{}
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateNotification mocks base method.
func (m *MockNotificationRepository) CreateNotification(ctx context.Context, notification *entity.Notification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotification", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotification indicates an expected call of CreateNotification.
func (mr *MockNotificationRepositoryMockRecorder) CreateNotification(ctx, notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotification", reflect.TypeOf((*MockNotificationRepository)(nil).CreateNotification), ctx, notification)
}

// DeleteAllNotifications mocks base method.
func (m *MockNotificationRepository) DeleteAllNotifications(ctx context.Context, userID int, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllNotifications", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllNotifications indicates an expected call of DeleteAllNotifications.
func (mr *MockNotificationRepositoryMockRecorder) DeleteAllNotifications(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).DeleteAllNotifications), ctx, userID, role)
}

// GetApplyNotificationPreview mocks base method.
func (m *MockNotificationRepository) GetApplyNotificationPreview(ctx context.Context, notificationID int) (*entity.NotificationPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplyNotificationPreview", ctx, notificationID)
	ret0, _ := ret[0].(*entity.NotificationPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplyNotificationPreview indicates an expected call of GetApplyNotificationPreview.
func (mr *MockNotificationRepositoryMockRecorder) GetApplyNotificationPreview(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplyNotificationPreview", reflect.TypeOf((*MockNotificationRepository)(nil).GetApplyNotificationPreview), ctx, notificationID)
}

// GetApplyNotificationsForUser mocks base method.
func (m *MockNotificationRepository) GetApplyNotificationsForUser(ctx context.Context, notificationID int) ([]*entity.NotificationPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplyNotificationsForUser", ctx, notificationID)
	ret0, _ := ret[0].([]*entity.NotificationPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplyNotificationsForUser indicates an expected call of GetApplyNotificationsForUser.
func (mr *MockNotificationRepositoryMockRecorder) GetApplyNotificationsForUser(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplyNotificationsForUser", reflect.TypeOf((*MockNotificationRepository)(nil).GetApplyNotificationsForUser), ctx, notificationID)
}

// GetDownloadResumeNotificationPreview mocks base method.
func (m *MockNotificationRepository) GetDownloadResumeNotificationPreview(ctx context.Context, notificationID int) (*entity.NotificationPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadResumeNotificationPreview", ctx, notificationID)
	ret0, _ := ret[0].(*entity.NotificationPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadResumeNotificationPreview indicates an expected call of GetDownloadResumeNotificationPreview.
func (mr *MockNotificationRepositoryMockRecorder) GetDownloadResumeNotificationPreview(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadResumeNotificationPreview", reflect.TypeOf((*MockNotificationRepository)(nil).GetDownloadResumeNotificationPreview), ctx, notificationID)
}

// GetDownloadResumeNotificationsForUser mocks base method.
func (m *MockNotificationRepository) GetDownloadResumeNotificationsForUser(ctx context.Context, notificationID int) ([]*entity.NotificationPreview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadResumeNotificationsForUser", ctx, notificationID)
	ret0, _ := ret[0].([]*entity.NotificationPreview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadResumeNotificationsForUser indicates an expected call of GetDownloadResumeNotificationsForUser.
func (mr *MockNotificationRepositoryMockRecorder) GetDownloadResumeNotificationsForUser(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadResumeNotificationsForUser", reflect.TypeOf((*MockNotificationRepository)(nil).GetDownloadResumeNotificationsForUser), ctx, notificationID)
}

// GetNotificationByID mocks base method.
func (m *MockNotificationRepository) GetNotificationByID(ctx context.Context, notificationID int) (*entity.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotificationByID", ctx, notificationID)
	ret0, _ := ret[0].(*entity.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotificationByID indicates an expected call of GetNotificationByID.
func (mr *MockNotificationRepositoryMockRecorder) GetNotificationByID(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotificationByID", reflect.TypeOf((*MockNotificationRepository)(nil).GetNotificationByID), ctx, notificationID)
}

// ReadAllNotifications mocks base method.
func (m *MockNotificationRepository) ReadAllNotifications(ctx context.Context, userID int, role string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllNotifications", ctx, userID, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadAllNotifications indicates an expected call of ReadAllNotifications.
func (mr *MockNotificationRepositoryMockRecorder) ReadAllNotifications(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllNotifications", reflect.TypeOf((*MockNotificationRepository)(nil).ReadAllNotifications), ctx, userID, role)
}

// ReadNotification mocks base method.
func (m *MockNotificationRepository) ReadNotification(ctx context.Context, notificationID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadNotification", ctx, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadNotification indicates an expected call of ReadNotification.
func (mr *MockNotificationRepositoryMockRecorder) ReadNotification(ctx, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadNotification", reflect.TypeOf((*MockNotificationRepository)(nil).ReadNotification), ctx, notificationID)
}
