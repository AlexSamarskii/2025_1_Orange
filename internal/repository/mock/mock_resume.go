// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/repository (interfaces: ResumeRepository)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/repository/mock/mock_resume.go ResuMatch/internal/repository ResumeRepository
//

// Package mock is a generated GoMock package.
package mock

import (
	entity "ResuMatch/internal/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockResumeRepository is a mock of ResumeRepository interface.
type MockResumeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResumeRepositoryMockRecorder
	isgomock struct{}
}

// MockResumeRepositoryMockRecorder is the mock recorder for MockResumeRepository.
type MockResumeRepositoryMockRecorder struct {
	mock *MockResumeRepository
}

// NewMockResumeRepository creates a new mock instance.
func NewMockResumeRepository(ctrl *gomock.Controller) *MockResumeRepository {
	mock := &MockResumeRepository{ctrl: ctrl}
	mock.recorder = &MockResumeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResumeRepository) EXPECT() *MockResumeRepositoryMockRecorder {
	return m.recorder
}

// AddSkills mocks base method.
func (m *MockResumeRepository) AddSkills(ctx context.Context, resumeID int, skillIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkills", ctx, resumeID, skillIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSkills indicates an expected call of AddSkills.
func (mr *MockResumeRepositoryMockRecorder) AddSkills(ctx, resumeID, skillIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkills", reflect.TypeOf((*MockResumeRepository)(nil).AddSkills), ctx, resumeID, skillIDs)
}

// AddSpecializations mocks base method.
func (m *MockResumeRepository) AddSpecializations(ctx context.Context, resumeID int, specializationIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpecializations", ctx, resumeID, specializationIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSpecializations indicates an expected call of AddSpecializations.
func (mr *MockResumeRepositoryMockRecorder) AddSpecializations(ctx, resumeID, specializationIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpecializations", reflect.TypeOf((*MockResumeRepository)(nil).AddSpecializations), ctx, resumeID, specializationIDs)
}

// AddWorkExperience mocks base method.
func (m *MockResumeRepository) AddWorkExperience(ctx context.Context, workExperience *entity.WorkExperience) (*entity.WorkExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWorkExperience", ctx, workExperience)
	ret0, _ := ret[0].(*entity.WorkExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWorkExperience indicates an expected call of AddWorkExperience.
func (mr *MockResumeRepositoryMockRecorder) AddWorkExperience(ctx, workExperience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWorkExperience", reflect.TypeOf((*MockResumeRepository)(nil).AddWorkExperience), ctx, workExperience)
}

// Create mocks base method.
func (m *MockResumeRepository) Create(ctx context.Context, resume *entity.Resume) (*entity.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resume)
	ret0, _ := ret[0].(*entity.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockResumeRepositoryMockRecorder) Create(ctx, resume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResumeRepository)(nil).Create), ctx, resume)
}

// CreateSkillIfNotExists mocks base method.
func (m *MockResumeRepository) CreateSkillIfNotExists(ctx context.Context, skillName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSkillIfNotExists", ctx, skillName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSkillIfNotExists indicates an expected call of CreateSkillIfNotExists.
func (mr *MockResumeRepositoryMockRecorder) CreateSkillIfNotExists(ctx, skillName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSkillIfNotExists", reflect.TypeOf((*MockResumeRepository)(nil).CreateSkillIfNotExists), ctx, skillName)
}

// CreateSpecializationIfNotExists mocks base method.
func (m *MockResumeRepository) CreateSpecializationIfNotExists(ctx context.Context, specializationName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSpecializationIfNotExists", ctx, specializationName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSpecializationIfNotExists indicates an expected call of CreateSpecializationIfNotExists.
func (mr *MockResumeRepositoryMockRecorder) CreateSpecializationIfNotExists(ctx, specializationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSpecializationIfNotExists", reflect.TypeOf((*MockResumeRepository)(nil).CreateSpecializationIfNotExists), ctx, specializationName)
}

// Delete mocks base method.
func (m *MockResumeRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResumeRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResumeRepository)(nil).Delete), ctx, id)
}

// DeleteSkills mocks base method.
func (m *MockResumeRepository) DeleteSkills(ctx context.Context, resumeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkills", ctx, resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSkills indicates an expected call of DeleteSkills.
func (mr *MockResumeRepositoryMockRecorder) DeleteSkills(ctx, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkills", reflect.TypeOf((*MockResumeRepository)(nil).DeleteSkills), ctx, resumeID)
}

// DeleteSpecializations mocks base method.
func (m *MockResumeRepository) DeleteSpecializations(ctx context.Context, resumeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSpecializations", ctx, resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSpecializations indicates an expected call of DeleteSpecializations.
func (mr *MockResumeRepositoryMockRecorder) DeleteSpecializations(ctx, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSpecializations", reflect.TypeOf((*MockResumeRepository)(nil).DeleteSpecializations), ctx, resumeID)
}

// DeleteWorkExperience mocks base method.
func (m *MockResumeRepository) DeleteWorkExperience(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkExperience", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkExperience indicates an expected call of DeleteWorkExperience.
func (mr *MockResumeRepositoryMockRecorder) DeleteWorkExperience(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkExperience", reflect.TypeOf((*MockResumeRepository)(nil).DeleteWorkExperience), ctx, id)
}

// DeleteWorkExperiences mocks base method.
func (m *MockResumeRepository) DeleteWorkExperiences(ctx context.Context, resumeID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkExperiences", ctx, resumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkExperiences indicates an expected call of DeleteWorkExperiences.
func (mr *MockResumeRepositoryMockRecorder) DeleteWorkExperiences(ctx, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkExperiences", reflect.TypeOf((*MockResumeRepository)(nil).DeleteWorkExperiences), ctx, resumeID)
}

// FindSkillIDsByNames mocks base method.
func (m *MockResumeRepository) FindSkillIDsByNames(ctx context.Context, skillNames []string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSkillIDsByNames", ctx, skillNames)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSkillIDsByNames indicates an expected call of FindSkillIDsByNames.
func (mr *MockResumeRepositoryMockRecorder) FindSkillIDsByNames(ctx, skillNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSkillIDsByNames", reflect.TypeOf((*MockResumeRepository)(nil).FindSkillIDsByNames), ctx, skillNames)
}

// FindSpecializationIDByName mocks base method.
func (m *MockResumeRepository) FindSpecializationIDByName(ctx context.Context, specializationName string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpecializationIDByName", ctx, specializationName)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpecializationIDByName indicates an expected call of FindSpecializationIDByName.
func (mr *MockResumeRepositoryMockRecorder) FindSpecializationIDByName(ctx, specializationName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpecializationIDByName", reflect.TypeOf((*MockResumeRepository)(nil).FindSpecializationIDByName), ctx, specializationName)
}

// FindSpecializationIDsByNames mocks base method.
func (m *MockResumeRepository) FindSpecializationIDsByNames(ctx context.Context, specializationNames []string) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpecializationIDsByNames", ctx, specializationNames)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpecializationIDsByNames indicates an expected call of FindSpecializationIDsByNames.
func (mr *MockResumeRepositoryMockRecorder) FindSpecializationIDsByNames(ctx, specializationNames any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpecializationIDsByNames", reflect.TypeOf((*MockResumeRepository)(nil).FindSpecializationIDsByNames), ctx, specializationNames)
}

// GetAll mocks base method.
func (m *MockResumeRepository) GetAll(ctx context.Context, limit, offset int) ([]entity.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, offset)
	ret0, _ := ret[0].([]entity.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockResumeRepositoryMockRecorder) GetAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockResumeRepository)(nil).GetAll), ctx, limit, offset)
}

// GetAllResumesByApplicantID mocks base method.
func (m *MockResumeRepository) GetAllResumesByApplicantID(ctx context.Context, applicantID, limit, offset int) ([]entity.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResumesByApplicantID", ctx, applicantID, limit, offset)
	ret0, _ := ret[0].([]entity.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResumesByApplicantID indicates an expected call of GetAllResumesByApplicantID.
func (mr *MockResumeRepositoryMockRecorder) GetAllResumesByApplicantID(ctx, applicantID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResumesByApplicantID", reflect.TypeOf((*MockResumeRepository)(nil).GetAllResumesByApplicantID), ctx, applicantID, limit, offset)
}

// GetByID mocks base method.
func (m *MockResumeRepository) GetByID(ctx context.Context, id int) (*entity.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockResumeRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockResumeRepository)(nil).GetByID), ctx, id)
}

// GetSkillsByResumeID mocks base method.
func (m *MockResumeRepository) GetSkillsByResumeID(ctx context.Context, resumeID int) ([]entity.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillsByResumeID", ctx, resumeID)
	ret0, _ := ret[0].([]entity.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillsByResumeID indicates an expected call of GetSkillsByResumeID.
func (mr *MockResumeRepositoryMockRecorder) GetSkillsByResumeID(ctx, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillsByResumeID", reflect.TypeOf((*MockResumeRepository)(nil).GetSkillsByResumeID), ctx, resumeID)
}

// GetSpecializationsByResumeID mocks base method.
func (m *MockResumeRepository) GetSpecializationsByResumeID(ctx context.Context, resumeID int) ([]entity.Specialization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecializationsByResumeID", ctx, resumeID)
	ret0, _ := ret[0].([]entity.Specialization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecializationsByResumeID indicates an expected call of GetSpecializationsByResumeID.
func (mr *MockResumeRepositoryMockRecorder) GetSpecializationsByResumeID(ctx, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecializationsByResumeID", reflect.TypeOf((*MockResumeRepository)(nil).GetSpecializationsByResumeID), ctx, resumeID)
}

// GetWorkExperienceByResumeID mocks base method.
func (m *MockResumeRepository) GetWorkExperienceByResumeID(ctx context.Context, resumeID int) ([]entity.WorkExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkExperienceByResumeID", ctx, resumeID)
	ret0, _ := ret[0].([]entity.WorkExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkExperienceByResumeID indicates an expected call of GetWorkExperienceByResumeID.
func (mr *MockResumeRepositoryMockRecorder) GetWorkExperienceByResumeID(ctx, resumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkExperienceByResumeID", reflect.TypeOf((*MockResumeRepository)(nil).GetWorkExperienceByResumeID), ctx, resumeID)
}

// Update mocks base method.
func (m *MockResumeRepository) Update(ctx context.Context, resume *entity.Resume) (*entity.Resume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resume)
	ret0, _ := ret[0].(*entity.Resume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResumeRepositoryMockRecorder) Update(ctx, resume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResumeRepository)(nil).Update), ctx, resume)
}

// UpdateWorkExperience mocks base method.
func (m *MockResumeRepository) UpdateWorkExperience(ctx context.Context, workExperience *entity.WorkExperience) (*entity.WorkExperience, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkExperience", ctx, workExperience)
	ret0, _ := ret[0].(*entity.WorkExperience)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWorkExperience indicates an expected call of UpdateWorkExperience.
func (mr *MockResumeRepositoryMockRecorder) UpdateWorkExperience(ctx, workExperience any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkExperience", reflect.TypeOf((*MockResumeRepository)(nil).UpdateWorkExperience), ctx, workExperience)
}
