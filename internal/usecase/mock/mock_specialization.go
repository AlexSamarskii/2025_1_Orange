// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/usecase (interfaces: SpecializationUsecase)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_specialization.go ResuMatch/internal/usecase SpecializationUsecase
//

// Package mock is a generated GoMock package.
package mock

import (
	dto "ResuMatch/internal/entity/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSpecializationUsecase is a mock of SpecializationUsecase interface.
type MockSpecializationUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSpecializationUsecaseMockRecorder
	isgomock struct{}
}

// MockSpecializationUsecaseMockRecorder is the mock recorder for MockSpecializationUsecase.
type MockSpecializationUsecaseMockRecorder struct {
	mock *MockSpecializationUsecase
}

// NewMockSpecializationUsecase creates a new mock instance.
func NewMockSpecializationUsecase(ctrl *gomock.Controller) *MockSpecializationUsecase {
	mock := &MockSpecializationUsecase{ctrl: ctrl}
	mock.recorder = &MockSpecializationUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpecializationUsecase) EXPECT() *MockSpecializationUsecaseMockRecorder {
	return m.recorder
}

// GetAllSpecializationNames mocks base method.
func (m *MockSpecializationUsecase) GetAllSpecializationNames(ctx context.Context) (*dto.SpecializationNamesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSpecializationNames", ctx)
	ret0, _ := ret[0].(*dto.SpecializationNamesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSpecializationNames indicates an expected call of GetAllSpecializationNames.
func (mr *MockSpecializationUsecaseMockRecorder) GetAllSpecializationNames(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSpecializationNames", reflect.TypeOf((*MockSpecializationUsecase)(nil).GetAllSpecializationNames), ctx)
}

// GetSpecializationSalaries mocks base method.
func (m *MockSpecializationUsecase) GetSpecializationSalaries(ctx context.Context) (*dto.SpecializationSalaryRangesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecializationSalaries", ctx)
	ret0, _ := ret[0].(*dto.SpecializationSalaryRangesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpecializationSalaries indicates an expected call of GetSpecializationSalaries.
func (mr *MockSpecializationUsecaseMockRecorder) GetSpecializationSalaries(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecializationSalaries", reflect.TypeOf((*MockSpecializationUsecase)(nil).GetSpecializationSalaries), ctx)
}
