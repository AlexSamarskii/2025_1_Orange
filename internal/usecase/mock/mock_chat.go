// Code generated by MockGen. DO NOT EDIT.
// Source: ResuMatch/internal/usecase (interfaces: Chat)
//
// Generated by this command:
//
//	mockgen -package mock -destination internal/usecase/mock/mock_chat.go ResuMatch/internal/usecase Chat
//

// Package mock is a generated GoMock package.
package mock

import (
	dto "ResuMatch/internal/entity/dto"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChat is a mock of Chat interface.
type MockChat struct {
	ctrl     *gomock.Controller
	recorder *MockChatMockRecorder
	isgomock struct{}
}

// MockChatMockRecorder is the mock recorder for MockChat.
type MockChatMockRecorder struct {
	mock *MockChat
}

// NewMockChat creates a new mock instance.
func NewMockChat(ctrl *gomock.Controller) *MockChat {
	mock := &MockChat{ctrl: ctrl}
	mock.recorder = &MockChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChat) EXPECT() *MockChatMockRecorder {
	return m.recorder
}

// GetChat mocks base method.
func (m *MockChat) GetChat(ctx context.Context, chatID, userID int, role string) (*dto.ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", ctx, chatID, userID, role)
	ret0, _ := ret[0].(*dto.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat.
func (mr *MockChatMockRecorder) GetChat(ctx, chatID, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockChat)(nil).GetChat), ctx, chatID, userID, role)
}

// GetChatMessages mocks base method.
func (m *MockChat) GetChatMessages(ctx context.Context, chatID int) (dto.MessagesResponseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMessages", ctx, chatID)
	ret0, _ := ret[0].(dto.MessagesResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMessages indicates an expected call of GetChatMessages.
func (mr *MockChatMockRecorder) GetChatMessages(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMessages", reflect.TypeOf((*MockChat)(nil).GetChatMessages), ctx, chatID)
}

// GetUserChats mocks base method.
func (m *MockChat) GetUserChats(ctx context.Context, userID int, role string) (dto.ChatResponseList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChats", ctx, userID, role)
	ret0, _ := ret[0].(dto.ChatResponseList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatMockRecorder) GetUserChats(ctx, userID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChat)(nil).GetUserChats), ctx, userID, role)
}

// GetVacancyChat mocks base method.
func (m *MockChat) GetVacancyChat(ctx context.Context, vacancyID, applicantID int, role string) (*dto.ChatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVacancyChat", ctx, vacancyID, applicantID, role)
	ret0, _ := ret[0].(*dto.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVacancyChat indicates an expected call of GetVacancyChat.
func (mr *MockChatMockRecorder) GetVacancyChat(ctx, vacancyID, applicantID, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVacancyChat", reflect.TypeOf((*MockChat)(nil).GetVacancyChat), ctx, vacancyID, applicantID, role)
}

// SendMessage mocks base method.
func (m *MockChat) SendMessage(ctx context.Context, chatID, senderID int, role, payload string) (*dto.MessageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, chatID, senderID, role, payload)
	ret0, _ := ret[0].(*dto.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatMockRecorder) SendMessage(ctx, chatID, senderID, role, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChat)(nil).SendMessage), ctx, chatID, senderID, role, payload)
}

// StartChat mocks base method.
func (m *MockChat) StartChat(ctx context.Context, vacancyID, resumeID, applicantID, employerID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChat", ctx, vacancyID, resumeID, applicantID, employerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartChat indicates an expected call of StartChat.
func (mr *MockChatMockRecorder) StartChat(ctx, vacancyID, resumeID, applicantID, employerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChat", reflect.TypeOf((*MockChat)(nil).StartChat), ctx, vacancyID, resumeID, applicantID, employerID)
}
