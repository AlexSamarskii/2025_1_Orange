// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeResuMatchInternalEntityDto(in *jlexer.Lexer, out *ChatUserPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "avatar_path":
			out.AvatarPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeResuMatchInternalEntityDto(out *jwriter.Writer, in ChatUserPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatUserPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeResuMatchInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatUserPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeResuMatchInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatUserPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeResuMatchInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatUserPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeResuMatchInternalEntityDto(l, v)
}
func easyjson9b8f5552DecodeResuMatchInternalEntityDto1(in *jlexer.Lexer, out *ChatShortResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "vacancy_title":
			out.VacancyTitle = string(in.String())
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeResuMatchInternalEntityDto1(out *jwriter.Writer, in ChatShortResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"vacancy_title\":"
		out.RawString(prefix)
		out.String(string(in.VacancyTitle))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatShortResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeResuMatchInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatShortResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeResuMatchInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatShortResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeResuMatchInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatShortResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeResuMatchInternalEntityDto1(l, v)
}
func easyjson9b8f5552DecodeResuMatchInternalEntityDto2(in *jlexer.Lexer, out *ChatResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ChatResponseList, 0, 8)
			} else {
				*out = ChatResponseList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *ChatShortResponse
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(ChatShortResponse)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeResuMatchInternalEntityDto2(out *jwriter.Writer, in ChatResponseList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ChatResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeResuMatchInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeResuMatchInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeResuMatchInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeResuMatchInternalEntityDto2(l, v)
}
func easyjson9b8f5552DecodeResuMatchInternalEntityDto3(in *jlexer.Lexer, out *ChatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "vacancy":
			if in.IsNull() {
				in.Skip()
				out.Vacancy = nil
			} else {
				if out.Vacancy == nil {
					out.Vacancy = new(VacancyChatResponse)
				}
				(*out.Vacancy).UnmarshalEasyJSON(in)
			}
		case "resume":
			if in.IsNull() {
				in.Skip()
				out.Resume = nil
			} else {
				if out.Resume == nil {
					out.Resume = new(ResumeChatResponse)
				}
				(*out.Resume).UnmarshalEasyJSON(in)
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeResuMatchInternalEntityDto3(out *jwriter.Writer, in ChatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"vacancy\":"
		out.RawString(prefix)
		if in.Vacancy == nil {
			out.RawString("null")
		} else {
			(*in.Vacancy).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"resume\":"
		out.RawString(prefix)
		if in.Resume == nil {
			out.RawString("null")
		} else {
			(*in.Resume).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeResuMatchInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeResuMatchInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeResuMatchInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeResuMatchInternalEntityDto3(l, v)
}
