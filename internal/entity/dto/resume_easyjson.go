// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	entity "ResuMatch/internal/entity"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson39b3a2f5DecodeResuMatchInternalEntityDto(in *jlexer.Lexer, out *WorkExperienceShort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_name":
			out.EmployerName = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "duties":
			out.Duties = string(in.String())
		case "achievements":
			out.Achievements = string(in.String())
		case "start_date":
			out.StartDate = string(in.String())
		case "end_date":
			out.EndDate = string(in.String())
		case "until_now":
			out.UntilNow = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto(out *jwriter.Writer, in WorkExperienceShort) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"employer_name\":"
		out.RawString(prefix)
		out.String(string(in.EmployerName))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	if in.Duties != "" {
		const prefix string = ",\"duties\":"
		out.RawString(prefix)
		out.String(string(in.Duties))
	}
	if in.Achievements != "" {
		const prefix string = ",\"achievements\":"
		out.RawString(prefix)
		out.String(string(in.Achievements))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	if in.EndDate != "" {
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	{
		const prefix string = ",\"until_now\":"
		out.RawString(prefix)
		out.Bool(bool(in.UntilNow))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkExperienceShort) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkExperienceShort) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkExperienceShort) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkExperienceShort) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto1(in *jlexer.Lexer, out *WorkExperienceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_name":
			out.EmployerName = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "duties":
			out.Duties = string(in.String())
		case "achievements":
			out.Achievements = string(in.String())
		case "start_date":
			out.StartDate = string(in.String())
		case "end_date":
			out.EndDate = string(in.String())
		case "until_now":
			out.UntilNow = bool(in.Bool())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto1(out *jwriter.Writer, in WorkExperienceResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"employer_name\":"
		out.RawString(prefix)
		out.String(string(in.EmployerName))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	if in.Duties != "" {
		const prefix string = ",\"duties\":"
		out.RawString(prefix)
		out.String(string(in.Duties))
	}
	if in.Achievements != "" {
		const prefix string = ",\"achievements\":"
		out.RawString(prefix)
		out.String(string(in.Achievements))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	if in.EndDate != "" {
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	{
		const prefix string = ",\"until_now\":"
		out.RawString(prefix)
		out.Bool(bool(in.UntilNow))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkExperienceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkExperienceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkExperienceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkExperienceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto1(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto2(in *jlexer.Lexer, out *WorkExperienceDTO) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "employer_name":
			out.EmployerName = string(in.String())
		case "position":
			out.Position = string(in.String())
		case "duties":
			out.Duties = string(in.String())
		case "achievements":
			out.Achievements = string(in.String())
		case "start_date":
			out.StartDate = string(in.String())
		case "end_date":
			out.EndDate = string(in.String())
		case "until_now":
			out.UntilNow = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto2(out *jwriter.Writer, in WorkExperienceDTO) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"employer_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.EmployerName))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	{
		const prefix string = ",\"duties\":"
		out.RawString(prefix)
		out.String(string(in.Duties))
	}
	{
		const prefix string = ",\"achievements\":"
		out.RawString(prefix)
		out.String(string(in.Achievements))
	}
	{
		const prefix string = ",\"start_date\":"
		out.RawString(prefix)
		out.String(string(in.StartDate))
	}
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.String(string(in.EndDate))
	}
	{
		const prefix string = ",\"until_now\":"
		out.RawString(prefix)
		out.Bool(bool(in.UntilNow))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkExperienceDTO) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkExperienceDTO) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkExperienceDTO) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkExperienceDTO) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto2(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto3(in *jlexer.Lexer, out *UpdateResumeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "about_me":
			out.AboutMe = string(in.String())
		case "specialization":
			out.Specialization = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "education":
			out.Education = entity.EducationType(in.String())
		case "educational_institution":
			out.EducationalInstitution = string(in.String())
		case "graduation_year":
			out.GraduationYear = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Skills = append(out.Skills, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additional_specializations":
			if in.IsNull() {
				in.Skip()
				out.AdditionalSpecializations = nil
			} else {
				in.Delim('[')
				if out.AdditionalSpecializations == nil {
					if !in.IsDelim(']') {
						out.AdditionalSpecializations = make([]string, 0, 4)
					} else {
						out.AdditionalSpecializations = []string{}
					}
				} else {
					out.AdditionalSpecializations = (out.AdditionalSpecializations)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.AdditionalSpecializations = append(out.AdditionalSpecializations, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "work_experiences":
			if in.IsNull() {
				in.Skip()
				out.WorkExperiences = nil
			} else {
				in.Delim('[')
				if out.WorkExperiences == nil {
					if !in.IsDelim(']') {
						out.WorkExperiences = make([]WorkExperienceDTO, 0, 0)
					} else {
						out.WorkExperiences = []WorkExperienceDTO{}
					}
				} else {
					out.WorkExperiences = (out.WorkExperiences)[:0]
				}
				for !in.IsDelim(']') {
					var v3 WorkExperienceDTO
					(v3).UnmarshalEasyJSON(in)
					out.WorkExperiences = append(out.WorkExperiences, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto3(out *jwriter.Writer, in UpdateResumeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"about_me\":"
		out.RawString(prefix[1:])
		out.String(string(in.AboutMe))
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	{
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		out.String(string(in.Education))
	}
	{
		const prefix string = ",\"educational_institution\":"
		out.RawString(prefix)
		out.String(string(in.EducationalInstitution))
	}
	{
		const prefix string = ",\"graduation_year\":"
		out.RawString(prefix)
		out.String(string(in.GraduationYear))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Skills {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additional_specializations\":"
		out.RawString(prefix)
		if in.AdditionalSpecializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.AdditionalSpecializations {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"work_experiences\":"
		out.RawString(prefix)
		if in.WorkExperiences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.WorkExperiences {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateResumeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateResumeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateResumeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateResumeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto3(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto4(in *jlexer.Lexer, out *ResumeShortResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ResumeShortResponseList, 0, 0)
			} else {
				*out = ResumeShortResponseList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 ResumeShortResponse
			(v10).UnmarshalEasyJSON(in)
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto4(out *jwriter.Writer, in ResumeShortResponseList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			(v12).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeShortResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeShortResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeShortResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeShortResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto4(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto5(in *jlexer.Lexer, out *ResumeShortResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "applicant":
			if in.IsNull() {
				in.Skip()
				out.Applicant = nil
			} else {
				if out.Applicant == nil {
					out.Applicant = new(ApplicantProfileResponse)
				}
				(*out.Applicant).UnmarshalEasyJSON(in)
			}
		case "specialization":
			out.Specialization = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "work_experiences":
			(out.WorkExperience).UnmarshalEasyJSON(in)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto5(out *jwriter.Writer, in ResumeShortResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ApplicantID != 0 {
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	{
		const prefix string = ",\"applicant\":"
		out.RawString(prefix)
		if in.Applicant == nil {
			out.RawString("null")
		} else {
			(*in.Applicant).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	{
		const prefix string = ",\"work_experiences\":"
		out.RawString(prefix)
		(in.WorkExperience).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeShortResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeShortResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeShortResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeShortResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto5(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto6(in *jlexer.Lexer, out *ResumeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "about_me":
			out.AboutMe = string(in.String())
		case "specialization":
			out.Specialization = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "education":
			out.Education = entity.EducationType(in.String())
		case "educational_institution":
			out.EducationalInstitution = string(in.String())
		case "graduation_year":
			out.GraduationYear = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Skills = append(out.Skills, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additional_specializations":
			if in.IsNull() {
				in.Skip()
				out.AdditionalSpecializations = nil
			} else {
				in.Delim('[')
				if out.AdditionalSpecializations == nil {
					if !in.IsDelim(']') {
						out.AdditionalSpecializations = make([]string, 0, 4)
					} else {
						out.AdditionalSpecializations = []string{}
					}
				} else {
					out.AdditionalSpecializations = (out.AdditionalSpecializations)[:0]
				}
				for !in.IsDelim(']') {
					var v14 string
					v14 = string(in.String())
					out.AdditionalSpecializations = append(out.AdditionalSpecializations, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "work_experiences":
			if in.IsNull() {
				in.Skip()
				out.WorkExperiences = nil
			} else {
				in.Delim('[')
				if out.WorkExperiences == nil {
					if !in.IsDelim(']') {
						out.WorkExperiences = make([]WorkExperienceResponse, 0, 0)
					} else {
						out.WorkExperiences = []WorkExperienceResponse{}
					}
				} else {
					out.WorkExperiences = (out.WorkExperiences)[:0]
				}
				for !in.IsDelim(']') {
					var v15 WorkExperienceResponse
					(v15).UnmarshalEasyJSON(in)
					out.WorkExperiences = append(out.WorkExperiences, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto6(out *jwriter.Writer, in ResumeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	if in.AboutMe != "" {
		const prefix string = ",\"about_me\":"
		out.RawString(prefix)
		out.String(string(in.AboutMe))
	}
	if in.Specialization != "" {
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	if in.Profession != "" {
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	if in.Education != "" {
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		out.String(string(in.Education))
	}
	if in.EducationalInstitution != "" {
		const prefix string = ",\"educational_institution\":"
		out.RawString(prefix)
		out.String(string(in.EducationalInstitution))
	}
	if in.GraduationYear != "" {
		const prefix string = ",\"graduation_year\":"
		out.RawString(prefix)
		out.String(string(in.GraduationYear))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Skills {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.String(string(v17))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additional_specializations\":"
		out.RawString(prefix)
		if in.AdditionalSpecializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.AdditionalSpecializations {
				if v18 > 0 {
					out.RawByte(',')
				}
				out.String(string(v19))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"work_experiences\":"
		out.RawString(prefix)
		if in.WorkExperiences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.WorkExperiences {
				if v20 > 0 {
					out.RawByte(',')
				}
				(v21).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto6(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto7(in *jlexer.Lexer, out *ResumeChatResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "avatar_path":
			out.AvatarPath = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto7(out *jwriter.Writer, in ResumeChatResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	{
		const prefix string = ",\"avatar_path\":"
		out.RawString(prefix)
		out.String(string(in.AvatarPath))
	}
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeChatResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeChatResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeChatResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeChatResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto7(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto8(in *jlexer.Lexer, out *ResumeApplicantShortResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ResumeApplicantShortResponseList, 0, 0)
			} else {
				*out = ResumeApplicantShortResponseList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v22 ResumeApplicantShortResponse
			(v22).UnmarshalEasyJSON(in)
			*out = append(*out, v22)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto8(out *jwriter.Writer, in ResumeApplicantShortResponseList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in {
			if v23 > 0 {
				out.RawByte(',')
			}
			(v24).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeApplicantShortResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeApplicantShortResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeApplicantShortResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeApplicantShortResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto8(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto9(in *jlexer.Lexer, out *ResumeApplicantShortResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "applicant":
			if in.IsNull() {
				in.Skip()
				out.Applicant = nil
			} else {
				if out.Applicant == nil {
					out.Applicant = new(ApplicantProfileResponse)
				}
				(*out.Applicant).UnmarshalEasyJSON(in)
			}
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.Skills = append(out.Skills, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "specialization":
			out.Specialization = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "work_experiences":
			(out.WorkExperience).UnmarshalEasyJSON(in)
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto9(out *jwriter.Writer, in ResumeApplicantShortResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.ApplicantID != 0 {
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	{
		const prefix string = ",\"applicant\":"
		out.RawString(prefix)
		if in.Applicant == nil {
			out.RawString("null")
		} else {
			(*in.Applicant).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Skills {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.String(string(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	{
		const prefix string = ",\"work_experiences\":"
		out.RawString(prefix)
		(in.WorkExperience).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResumeApplicantShortResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResumeApplicantShortResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResumeApplicantShortResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResumeApplicantShortResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto9(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto10(in *jlexer.Lexer, out *DeleteResumeResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto10(out *jwriter.Writer, in DeleteResumeResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteResumeResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteResumeResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteResumeResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteResumeResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto10(l, v)
}
func easyjson39b3a2f5DecodeResuMatchInternalEntityDto11(in *jlexer.Lexer, out *CreateResumeRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "about_me":
			out.AboutMe = string(in.String())
		case "specialization":
			out.Specialization = string(in.String())
		case "profession":
			out.Profession = string(in.String())
		case "education":
			out.Education = entity.EducationType(in.String())
		case "educational_institution":
			out.EducationalInstitution = string(in.String())
		case "graduation_year":
			out.GraduationYear = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Skills = append(out.Skills, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "additional_specializations":
			if in.IsNull() {
				in.Skip()
				out.AdditionalSpecializations = nil
			} else {
				in.Delim('[')
				if out.AdditionalSpecializations == nil {
					if !in.IsDelim(']') {
						out.AdditionalSpecializations = make([]string, 0, 4)
					} else {
						out.AdditionalSpecializations = []string{}
					}
				} else {
					out.AdditionalSpecializations = (out.AdditionalSpecializations)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.AdditionalSpecializations = append(out.AdditionalSpecializations, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "work_experiences":
			if in.IsNull() {
				in.Skip()
				out.WorkExperiences = nil
			} else {
				in.Delim('[')
				if out.WorkExperiences == nil {
					if !in.IsDelim(']') {
						out.WorkExperiences = make([]WorkExperienceDTO, 0, 0)
					} else {
						out.WorkExperiences = []WorkExperienceDTO{}
					}
				} else {
					out.WorkExperiences = (out.WorkExperiences)[:0]
				}
				for !in.IsDelim(']') {
					var v30 WorkExperienceDTO
					(v30).UnmarshalEasyJSON(in)
					out.WorkExperiences = append(out.WorkExperiences, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson39b3a2f5EncodeResuMatchInternalEntityDto11(out *jwriter.Writer, in CreateResumeRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"about_me\":"
		out.RawString(prefix[1:])
		out.String(string(in.AboutMe))
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"profession\":"
		out.RawString(prefix)
		out.String(string(in.Profession))
	}
	{
		const prefix string = ",\"education\":"
		out.RawString(prefix)
		out.String(string(in.Education))
	}
	{
		const prefix string = ",\"educational_institution\":"
		out.RawString(prefix)
		out.String(string(in.EducationalInstitution))
	}
	{
		const prefix string = ",\"graduation_year\":"
		out.RawString(prefix)
		out.String(string(in.GraduationYear))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Skills {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"additional_specializations\":"
		out.RawString(prefix)
		if in.AdditionalSpecializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.AdditionalSpecializations {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"work_experiences\":"
		out.RawString(prefix)
		if in.WorkExperiences == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.WorkExperiences {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateResumeRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateResumeRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson39b3a2f5EncodeResuMatchInternalEntityDto11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateResumeRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateResumeRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson39b3a2f5DecodeResuMatchInternalEntityDto11(l, v)
}
