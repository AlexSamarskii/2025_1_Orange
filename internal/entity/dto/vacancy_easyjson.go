// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson80a4d695DecodeResuMatchInternalEntityDto(in *jlexer.Lexer, out *VacancyUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "specialization":
			out.Specialization = string(in.String())
		case "work_format":
			out.WorkFormat = string(in.String())
		case "employment":
			out.Employment = string(in.String())
		case "schedule":
			out.Schedule = string(in.String())
		case "working_hours":
			out.WorkingHours = int(in.Int())
		case "salary_from":
			out.SalaryFrom = int(in.Int())
		case "salary_to":
			out.SalaryTo = int(in.Int())
		case "taxes_included":
			out.TaxesIncluded = bool(in.Bool())
		case "experience":
			out.Experience = string(in.String())
		case "city":
			out.City = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Skills = append(out.Skills, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "tasks":
			out.Tasks = string(in.String())
		case "requirements":
			out.Requirements = string(in.String())
		case "optional_requirements":
			out.OptionalRequirements = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto(out *jwriter.Writer, in VacancyUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"work_format\":"
		out.RawString(prefix)
		out.String(string(in.WorkFormat))
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	{
		const prefix string = ",\"schedule\":"
		out.RawString(prefix)
		out.String(string(in.Schedule))
	}
	{
		const prefix string = ",\"working_hours\":"
		out.RawString(prefix)
		out.Int(int(in.WorkingHours))
	}
	{
		const prefix string = ",\"salary_from\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryFrom))
	}
	{
		const prefix string = ",\"salary_to\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryTo))
	}
	{
		const prefix string = ",\"taxes_included\":"
		out.RawString(prefix)
		out.Bool(bool(in.TaxesIncluded))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Skills {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"tasks\":"
		out.RawString(prefix)
		out.String(string(in.Tasks))
	}
	{
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		out.String(string(in.Requirements))
	}
	{
		const prefix string = ",\"optional_requirements\":"
		out.RawString(prefix)
		out.String(string(in.OptionalRequirements))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto1(in *jlexer.Lexer, out *VacancyShortResponseList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(VacancyShortResponseList, 0, 0)
			} else {
				*out = VacancyShortResponseList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 VacancyShortResponse
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto1(out *jwriter.Writer, in VacancyShortResponseList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyShortResponseList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyShortResponseList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyShortResponseList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyShortResponseList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto1(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto2(in *jlexer.Lexer, out *VacancyShortResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "employer":
			if in.IsNull() {
				in.Skip()
				out.Employer = nil
			} else {
				if out.Employer == nil {
					out.Employer = new(EmployerProfileResponse)
				}
				(*out.Employer).UnmarshalEasyJSON(in)
			}
		case "specialization":
			out.Specialization = string(in.String())
		case "work_format":
			out.WorkFormat = string(in.String())
		case "employment":
			out.Employment = string(in.String())
		case "working_hours":
			out.WorkingHours = int(in.Int())
		case "salary_from":
			out.SalaryFrom = int(in.Int())
		case "salary_to":
			out.SalaryTo = int(in.Int())
		case "taxes_included":
			out.TaxesIncluded = bool(in.Bool())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "city":
			out.City = string(in.String())
		case "responded":
			out.Responded = bool(in.Bool())
		case "liked":
			out.Liked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto2(out *jwriter.Writer, in VacancyShortResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"employer\":"
		out.RawString(prefix)
		if in.Employer == nil {
			out.RawString("null")
		} else {
			(*in.Employer).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"work_format\":"
		out.RawString(prefix)
		out.String(string(in.WorkFormat))
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	{
		const prefix string = ",\"working_hours\":"
		out.RawString(prefix)
		out.Int(int(in.WorkingHours))
	}
	{
		const prefix string = ",\"salary_from\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryFrom))
	}
	{
		const prefix string = ",\"salary_to\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryTo))
	}
	{
		const prefix string = ",\"taxes_included\":"
		out.RawString(prefix)
		out.Bool(bool(in.TaxesIncluded))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"responded\":"
		out.RawString(prefix)
		out.Bool(bool(in.Responded))
	}
	{
		const prefix string = ",\"liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Liked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyShortResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyShortResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyShortResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyShortResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto2(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto3(in *jlexer.Lexer, out *VacancyResponsed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "vacancy_id":
			out.VacancyID = int(in.Int())
		case "applicant_id":
			out.ApplicantID = int(in.Int())
		case "resume_id":
			if in.IsNull() {
				in.Skip()
				out.ResumeID = nil
			} else {
				in.Delim('[')
				if out.ResumeID == nil {
					if !in.IsDelim(']') {
						out.ResumeID = make([]int, 0, 8)
					} else {
						out.ResumeID = []int{}
					}
				} else {
					out.ResumeID = (out.ResumeID)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int
					v7 = int(in.Int())
					out.ResumeID = append(out.ResumeID, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "applied_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AppliedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto3(out *jwriter.Writer, in VacancyResponsed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"vacancy_id\":"
		out.RawString(prefix)
		out.Int(int(in.VacancyID))
	}
	{
		const prefix string = ",\"applicant_id\":"
		out.RawString(prefix)
		out.Int(int(in.ApplicantID))
	}
	if len(in.ResumeID) != 0 {
		const prefix string = ",\"resume_id\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.ResumeID {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"applied_at\":"
		out.RawString(prefix)
		out.Raw((in.AppliedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyResponsed) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyResponsed) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyResponsed) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyResponsed) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto3(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto4(in *jlexer.Lexer, out *VacancyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "employer_id":
			out.EmployerID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "specialization":
			out.Specialization = string(in.String())
		case "work_format":
			out.WorkFormat = string(in.String())
		case "employment":
			out.Employment = string(in.String())
		case "schedule":
			out.Schedule = string(in.String())
		case "working_hours":
			out.WorkingHours = int(in.Int())
		case "salary_from":
			out.SalaryFrom = int(in.Int())
		case "salary_to":
			out.SalaryTo = int(in.Int())
		case "taxes_included":
			out.TaxesIncluded = bool(in.Bool())
		case "experience":
			out.Experience = string(in.String())
		case "city":
			out.City = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Skills = append(out.Skills, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "tasks":
			out.Tasks = string(in.String())
		case "requirements":
			out.Requirements = string(in.String())
		case "optional_requirements":
			out.OptionalRequirements = string(in.String())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "updated_at":
			out.UpdatedAt = string(in.String())
		case "responded":
			out.Responded = bool(in.Bool())
		case "liked":
			out.Liked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto4(out *jwriter.Writer, in VacancyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"employer_id\":"
		out.RawString(prefix)
		out.Int(int(in.EmployerID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"work_format\":"
		out.RawString(prefix)
		out.String(string(in.WorkFormat))
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	{
		const prefix string = ",\"schedule\":"
		out.RawString(prefix)
		out.String(string(in.Schedule))
	}
	{
		const prefix string = ",\"working_hours\":"
		out.RawString(prefix)
		out.Int(int(in.WorkingHours))
	}
	{
		const prefix string = ",\"salary_from\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryFrom))
	}
	{
		const prefix string = ",\"salary_to\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryTo))
	}
	{
		const prefix string = ",\"taxes_included\":"
		out.RawString(prefix)
		out.Bool(bool(in.TaxesIncluded))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Skills {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"tasks\":"
		out.RawString(prefix)
		out.String(string(in.Tasks))
	}
	{
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		out.String(string(in.Requirements))
	}
	{
		const prefix string = ",\"optional_requirements\":"
		out.RawString(prefix)
		out.String(string(in.OptionalRequirements))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedAt))
	}
	{
		const prefix string = ",\"responded\":"
		out.RawString(prefix)
		out.Bool(bool(in.Responded))
	}
	{
		const prefix string = ",\"liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Liked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto4(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto5(in *jlexer.Lexer, out *VacancyCreate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "specialization":
			out.Specialization = string(in.String())
		case "work_format":
			out.WorkFormat = string(in.String())
		case "employment":
			out.Employment = string(in.String())
		case "schedule":
			out.Schedule = string(in.String())
		case "working_hours":
			out.WorkingHours = int(in.Int())
		case "salary_from":
			out.SalaryFrom = int(in.Int())
		case "salary_to":
			out.SalaryTo = int(in.Int())
		case "taxes_included":
			out.TaxesIncluded = bool(in.Bool())
		case "experience":
			out.Experience = string(in.String())
		case "city":
			out.City = string(in.String())
		case "skills":
			if in.IsNull() {
				in.Skip()
				out.Skills = nil
			} else {
				in.Delim('[')
				if out.Skills == nil {
					if !in.IsDelim(']') {
						out.Skills = make([]string, 0, 4)
					} else {
						out.Skills = []string{}
					}
				} else {
					out.Skills = (out.Skills)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.Skills = append(out.Skills, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "description":
			out.Description = string(in.String())
		case "tasks":
			out.Tasks = string(in.String())
		case "requirements":
			out.Requirements = string(in.String())
		case "optional_requirements":
			out.OptionalRequirements = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto5(out *jwriter.Writer, in VacancyCreate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"specialization\":"
		out.RawString(prefix)
		out.String(string(in.Specialization))
	}
	{
		const prefix string = ",\"work_format\":"
		out.RawString(prefix)
		out.String(string(in.WorkFormat))
	}
	{
		const prefix string = ",\"employment\":"
		out.RawString(prefix)
		out.String(string(in.Employment))
	}
	{
		const prefix string = ",\"schedule\":"
		out.RawString(prefix)
		out.String(string(in.Schedule))
	}
	{
		const prefix string = ",\"working_hours\":"
		out.RawString(prefix)
		out.Int(int(in.WorkingHours))
	}
	{
		const prefix string = ",\"salary_from\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryFrom))
	}
	{
		const prefix string = ",\"salary_to\":"
		out.RawString(prefix)
		out.Int(int(in.SalaryTo))
	}
	{
		const prefix string = ",\"taxes_included\":"
		out.RawString(prefix)
		out.Bool(bool(in.TaxesIncluded))
	}
	{
		const prefix string = ",\"experience\":"
		out.RawString(prefix)
		out.String(string(in.Experience))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"skills\":"
		out.RawString(prefix)
		if in.Skills == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Skills {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"tasks\":"
		out.RawString(prefix)
		out.String(string(in.Tasks))
	}
	{
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		out.String(string(in.Requirements))
	}
	{
		const prefix string = ",\"optional_requirements\":"
		out.RawString(prefix)
		out.String(string(in.OptionalRequirements))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VacancyCreate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VacancyCreate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VacancyCreate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VacancyCreate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto5(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto6(in *jlexer.Lexer, out *SearchBySpecializationsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "specializations":
			if in.IsNull() {
				in.Skip()
				out.Specializations = nil
			} else {
				in.Delim('[')
				if out.Specializations == nil {
					if !in.IsDelim(']') {
						out.Specializations = make([]string, 0, 4)
					} else {
						out.Specializations = []string{}
					}
				} else {
					out.Specializations = (out.Specializations)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Specializations = append(out.Specializations, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto6(out *jwriter.Writer, in SearchBySpecializationsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"specializations\":"
		out.RawString(prefix[1:])
		if in.Specializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Specializations {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchBySpecializationsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchBySpecializationsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchBySpecializationsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchBySpecializationsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto6(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto7(in *jlexer.Lexer, out *SearchByQueryAndSpecializationsRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "specializations":
			if in.IsNull() {
				in.Skip()
				out.Specializations = nil
			} else {
				in.Delim('[')
				if out.Specializations == nil {
					if !in.IsDelim(']') {
						out.Specializations = make([]string, 0, 4)
					} else {
						out.Specializations = []string{}
					}
				} else {
					out.Specializations = (out.Specializations)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.Specializations = append(out.Specializations, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto7(out *jwriter.Writer, in SearchByQueryAndSpecializationsRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"specializations\":"
		out.RawString(prefix[1:])
		if in.Specializations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Specializations {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchByQueryAndSpecializationsRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchByQueryAndSpecializationsRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchByQueryAndSpecializationsRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchByQueryAndSpecializationsRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto7(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto8(in *jlexer.Lexer, out *DeleteVacancy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto8(out *jwriter.Writer, in DeleteVacancy) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeleteVacancy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeleteVacancy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeleteVacancy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeleteVacancy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto8(l, v)
}
func easyjson80a4d695DecodeResuMatchInternalEntityDto9(in *jlexer.Lexer, out *ApplyToVacancyRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "resume_id":
			out.ResumeID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson80a4d695EncodeResuMatchInternalEntityDto9(out *jwriter.Writer, in ApplyToVacancyRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ResumeID != 0 {
		const prefix string = ",\"resume_id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ResumeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApplyToVacancyRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson80a4d695EncodeResuMatchInternalEntityDto9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApplyToVacancyRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson80a4d695EncodeResuMatchInternalEntityDto9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApplyToVacancyRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson80a4d695DecodeResuMatchInternalEntityDto9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApplyToVacancyRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson80a4d695DecodeResuMatchInternalEntityDto9(l, v)
}
