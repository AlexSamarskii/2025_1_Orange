-- Создание таблицы applicant
CREATE TABLE IF NOT EXISTS applicant (
                                         id               INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                         first_name       TEXT CONSTRAINT applicant_first_name_length CHECK (LENGTH(first_name) <= 30) NOT NULL,
    last_name        TEXT CONSTRAINT applicant_last_name_length CHECK (LENGTH(last_name) <= 30) NOT NULL,
    email            TEXT CONSTRAINT valid_email_format CHECK (
                                                                  email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}(?:\.[A-Za-z]{2,})?$'
                                                              ) CONSTRAINT email_length CHECK (LENGTH(email) <= 255) NOT NULL UNIQUE,
    password_hashed  BYTEA CONSTRAINT password_hashed_length CHECK (OCTET_LENGTH(password_hashed) <= 32) NOT NULL,
    password_salt    BYTEA CONSTRAINT password_salt_length CHECK (OCTET_LENGTH(password_salt) <= 8) NOT NULL
    );

-- Создание таблицы employer
CREATE TABLE IF NOT EXISTS employer (
                                        id               INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                        company_name     TEXT CONSTRAINT company_name_length CHECK (LENGTH(company_name) <= 64) NOT NULL UNIQUE,
    legal_address    TEXT CONSTRAINT legal_address_length CHECK (LENGTH(legal_address) <= 255),
    email            TEXT CONSTRAINT valid_email_format CHECK (
                                                                  email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}(?:\.[A-Za-z]{2,})?$'
                                                              ) CONSTRAINT email_length CHECK (LENGTH(email) <= 255) NOT NULL UNIQUE,
    password_hashed  BYTEA CONSTRAINT password_hashed_length CHECK (OCTET_LENGTH(password_hashed) <= 32) NOT NULL,
    password_salt    BYTEA CONSTRAINT password_salt_length CHECK (OCTET_LENGTH(password_salt) <= 8) NOT NULL
    );
